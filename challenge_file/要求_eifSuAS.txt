1、

Django
mysqlclient
drf-yasg
djangorestframework==3.12
djangorestframework-simplejwt >4.6.0
Django-allauth
Django-rest-auth
python3-openid
requests
requests-oauthlib

2、
extra_kwargs = {
    "username": {
        "min_length": 5,
        "max_length": 15,
        "error_messages": {
            "min_length": "用户名不能少于5个字符",
            "max_length": "用户名不能超过15个字符"
        }},
    "password": {
        "min_length": 5,
        "max_length": 15,
        "error_messages": {
            "min_length": "密码不能少于5个字符",
            "max_length": "密码不能超过15个字符"
        }}
}


3、
if response is not None:
    response.data.clear()
    response.data['status'] = response.status_code
    if response.status_code == 400:
        response.data['message'] = '请求错误'
    elif response.status_code == 401:
        response.data['message'] = "未授权"
    elif response.status_code == 403:
        response.data['message'] = "拒绝访问"
    elif response.status_code == 404:
        try:
            response.data['message'] = response.data.pop('detail')
            response.data['message'] = "未找到"
        except KeyError:
            response.data['message'] = "未找到"
    elif response.status_code == 405:
        response.data['message'] = '请求不允许'
    elif response.status_code == 405:
        response.data['message'] = '请求不允许'
    elif response.status_code == 405:
        response.data['message'] = '请求不允许'
    elif response.status_code == 408:
        response.data['message'] = '请求超时'
    elif response.status_code == 500:
        response.data['message'] = '服务器错误'
    elif response.status_code == 501:
        response.data['message'] = "服务未实现"
    elif response.status_code == 502:
        response.data['message'] = "网络错误"
    elif response.status_code == 503:
        response.data['message'] = "服务不可用"
    elif response.status_code == 504:
        response.data['message'] = "网络超时"
    elif response.status_code == 505:
        response.data['message'] = "HTTP版本不受支持"
    else:
        response.data['message'] = '未知错误'


4、
def check_username(value: str):
    # 校验通过直接return
    # 校验失败 raise ValidationError('错误信息')
    pass

class AccountSerializer(serializers.Serializer):
    id = serializers.IntegerField(label='账号ID', read_only=True)
    username = serializers.CharField(label='账户名', validators=[check_username, ], min_value=5)
    password = serializers.CharField(label='密码', validators=[check_username, ],write_only=True)